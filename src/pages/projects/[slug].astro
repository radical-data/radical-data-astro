---
import Layout from "@layouts/Layout.astro";
import { Picture } from "@astrojs/image/components";
import { getRelatedPosts } from "../../lib/getRelatedPosts";
import { marked } from "marked";
import sanitizeHtml from "sanitize-html";
import Card from "~/components/Card.astro";
import Tag from "~/components/Tag.astro";
export async function getStaticPaths() {
  const response = await fetch(
    `https://api.airtable.com/v0/${
      import.meta.env.DB_ID
    }/Projects?view=Grid%20view`,
    {
      headers: {
        Authorization: `Bearer ${import.meta.env.DB_TOKEN}`,
      },
    }
  );
  const data = await response.json();
  return data.records.map((project: any) => {
    return {
      params: { slug: project.fields.Slug },
      props: {
        fields: project.fields,
        relatedPosts: getRelatedPosts(data.records, project, 6),
      },
    };
  });
}

const { slug } = Astro.params;
slug; // just to get rid of 'value never read'
const { fields, relatedPosts } = Astro.props;
console.log(fields);
// console.log(relatedPosts);
---

<Layout title={fields.Name}>
  <main>
    <article class="region prose wrapper">
      <h1>{fields.Name}</h1>
      {fields["Summary"] && <h2>{fields.Summary}</h2>}
      {
        fields["Featured Image"] && (
          <Picture
            src={fields["Featured Image"][0].url}
            widths={[400, 800, 1200]}
            aspectRatio={1}
            alt=""
          />
        )
      }
      {
        fields["Tags"] && (
          <>
            <ul>
              {fields.Tags.map((tag: string) => (
                <Tag tag={tag} />
              ))}
            </ul>
          </>
        )
      }
      <!-- {
        fields.Tools && (
          <>
            <ul>
              {fields.Tools.map((tool: string) => (
                <a href={`/tools/${tool}`}>
                  <li class="tag">{tool}</li>
                </a>
              ))}
            </ul>
          </>
        )
      } -->
      {
        fields["Content"] && (
          <div
            class="content"
            set:html={sanitizeHtml(marked.parse(fields.Content))}
          />
        )
      }
      {
        fields["Attribution"] && (
          <p>
            <i>{fields.Attribution}</i>
          </p>
        )
      }
      <h2>Similar projects to {fields.Name}</h2>
      <ul>
        {
          relatedPosts.map((project: any) => (
            <Card
              name={project.fields.Name}
              description={project.fields.Summary}
              image={project.fields["Featured Image"]}
              link={`./projects/${project.fields.Slug}`}
            />
          ))
        }
      </ul>
      <p>Back to <a href="./">all projects</a>.</p>
    </article>
  </main>
</Layout>
