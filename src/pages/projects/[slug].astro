---
import Layout from "@layouts/Layout.astro";
import { Picture } from "@astrojs/image/components";
import { getRelatedPosts } from "../../lib/getRelatedPosts";
export async function getStaticPaths() {
  const response = await fetch(
    `https://api.airtable.com/v0/${
      import.meta.env.DB_ID
    }/Projects?view=Grid%20view`,
    {
      headers: {
        Authorization: `Bearer ${import.meta.env.DB_TOKEN}`,
      },
    }
  );
  const data = await response.json();
  return data.records.map((project: any) => {
    return {
      params: { slug: project.fields.Slug },
      props: {
        fields: project.fields,
        relatedPosts: getRelatedPosts(data.records, project, 6),
      },
    };
  });
}

const { slug } = Astro.params;
slug; // just to get rid of 'value never read'
const { fields, relatedPosts } = Astro.props;
console.log(fields);
// console.log(relatedPosts);
---

<Layout title={fields.Name}>
  <main>
    <article class="region prose wrapper">
      <h1>{fields.Name}</h1>
      {fields["Summary"] && <h2>{fields.Summary}</h2>}
      {
        fields["Featured Image"] && (
          <Picture
            src={fields["Featured Image"][0].url}
            widths={[400, 800, 1200]}
            aspectRatio={1}
            alt=""
          />
        )
      }
      {
        fields["Tags"] && (
          <>
            <ul>
              {fields.Tags.map((tag: string) => (
                <a href={`/tags/${tag}`}>
                  <li class="tag">{tag}</li>
                </a>
              ))}
            </ul>
          </>
        )
      }
      <!-- {
        fields.Tools && (
          <>
            <ul>
              {fields.Tools.map((tool: string) => (
                <a href={`/tools/${tool}`}>
                  <li class="tag">{tool}</li>
                </a>
              ))}
            </ul>
          </>
        )
      } -->
      <p>{fields.Content}</p>
      {fields["Attribution"] && <p>{fields.Attribution}</p>}
      <h2>Similar projects to {fields.Name}</h2>
      <ul>
        {
          relatedPosts.map(
            (post: { fields: { Name: string; Slug: string } }) => (
              <li>
                <a href={post.fields.Slug}>{post.fields.Name}</a>
              </li>
            )
          )
        }
      </ul>
    </article>
  </main>
</Layout>
